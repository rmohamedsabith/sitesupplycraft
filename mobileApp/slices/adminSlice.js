import { createSlice } from "@reduxjs/toolkit";

const adminSlice=createSlice({
    name:'admin',
    initialState:{
        isLoading:false,
    },
    reducers:{
       viewProcessingOwnerRequest(state,action){
            return{
                ...state,
                isLoading:true
            }
        },
       viewProcessingOwnerSuccess(state,action){
            return{
                isLoading:false,
                user:action.payload.data
            }
        },
       viewProcessingOwnerFail(state,action){
            return{
                ...state,
                isLoading:false,
                error:action.payload
            }
        },
        getProcessingOwnersRequest(state,action){
            return{
                ...state,
                isLoading:true
            }
        },
        getProcessingOwnersSuccess(state,action){
            return{
                isLoading:false,
                user:action.payload.data
            }
        },
        getProcessingOwnersFail(state,action){
            return{
                ...state,
                isLoading:false,
                error:action.payload
            }
        },
        verifyOwnerRequest(state,action){
            return{
                ...state,
                isLoading:true
            }
        },
        verifyOwnerSuccess(state,action){
            return{
                isLoading:false,
                user:action.payload.data
            }
        },
        verifyOwnerFail(state,action){
            return{
                ...state,
                isLoading:false,
                error:action.payload
            }
        },
        cancelOwnerRequest(state,action){
            return{
                ...state,
                isLoading:true
            }
        },
        cancelOwnerSuccess(state,action){
            return{
                isLoading:false,
                user:action.payload.data
            }
        },
        cancelOwnerFail(state,action){
            return{
                ...state,
                isLoading:false,
                error:action.payload
            }
        },
        getTotalsRequest(state,action){
            return{
                ...state,
                isLoading:true
            }
        },
        getTotalsSuccess(state,action){
            return{
                isLoading:false,
                Totals:action.payload
            }
        },
        getTotalsFail(state,action){
            return{
                ...state,
                isLoading:false,
                error:action.payload
            }
        },
        getTotals_per_monthRequest(state,action){
            return{
                ...state,
                isLoading:true
            }
        },
        getTotals_per_monthSuccess(state,action){
            return{
                isLoading:false,
                datas:action.payload.data
            }
        },
        getTotals_per_monthFail(state,action){
            return{
                ...state,
                isLoading:false,
                error:action.payload
            }
        },
       
        clearError(state,action){
            return{
                ...state,
                user:null,
                error:null
            }
        },
        

    }
})

const{actions,reducer}=adminSlice;
export const{
    viewProcessingOwnerRequest,
    viewProcessingOwnerSuccess,
    viewProcessingOwnerFail,
    getProcessingOwnersRequest,
    getProcessingOwnersSuccess,
    getProcessingOwnersFail,
    cancelOwnerRequest,
    cancelOwnerSuccess,
    cancelOwnerFail,
    verifyOwnerRequest,
    verifyOwnerSuccess,
    verifyOwnerFail,
    getTotalsRequest,
    getTotalsSuccess,
    getTotalsFail,
    getTotals_per_monthRequest,
    getTotals_per_monthSuccess,
    getTotals_per_monthFail,
    clearError,
}=actions
export default reducer